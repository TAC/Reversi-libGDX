def VERSION_CODE = 1
def VERSION_NAME = "0.0.1"
def PACKAGE_NAME = "jp.x28go.game.reversi"

android {
    buildToolsVersion "23.0.1"
    compileSdkVersion 23

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 8
        targetSdkVersion 23
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
//            storeFile file("../keystore/debug.keystore")
        }
        release {
//            storeFile file("../keystore/release.keystore")
//            storePassword "hogehoge"
//            keyAlias "hogehoge"
//            keyPassword "hogehoge"
        }
    }

    productFlavors {
        develop {
            versionName VERSION_NAME + "-develop"
        }
        staging {
            versionName VERSION_NAME + "-staging"
        }
        product {
            versionName VERSION_NAME + "-product"
        }
    }

    applicationVariants.all { variant ->
        def prefix = appName + "-android"
        if (variant.buildType.name.equals("debug") || variant.buildType.name.equals("release")) {
            variant.outputs.each { output ->
                System.println("* output.outputFile.name : ${output.outputFile.name}")
                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                    def newName = "${prefix}_v${versionName}_r${versionCode}.apk"
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'jp.x28go.game/jp.x28go.game.reversi.AndroidLauncher'
}

apply plugin: 'kotlin-android'
apply plugin: 'deploygate'

repositories {
    jcenter()
//    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

deploygate {
    def keysProperties = project.file("../keys.properties")
    if (keysProperties.exists()) {
        Properties properties = new Properties()
        keysProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def deploygateUser = properties.getProperty('deploygate.user')
        if (deploygateUser) {
            userName = deploygateUser
        } else {
            userName = System.getenv("DEPLOYGATE_USER")
        }
        def deploygateToken = properties.getProperty('deploygate.token')
        if (deploygateToken) {
            token = deploygateToken
        } else {
            token = System.getenv("DEPLOYGATE_TOKEN")
        }
    } else {
        userName = System.getenv("DEPLOYGATE_USER")
        token = System.getenv("DEPLOYGATE_TOKEN")
    }

    apks {
        debug {
            sourceFile = file("${project.buildDir}/apk/${appName}-android_v${VERSION_NAME}-develop-debug_r${VERSION_CODE}.apk")
        }
    }
}
